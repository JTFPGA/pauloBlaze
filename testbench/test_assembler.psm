CONSTANT A_port, 00
CONSTANT B_port, 01
CONSTANT C_port, 02
CONSTANT D_port, 03
CONSTANT W_port, 01
CONSTANT X_port, 02
CONSTANT Y_port, 04
CONSTANT Z_port, 08

start:
	ENABLE INTERRUPT
	HWBUILD sF
	JUMP test_star		; change to test_pc to test under/overflow

test_star:
	LOAD s0, 01
	STAR s1, s0
	REGBANK B
	COMPARE s1, 01
	JUMP NZ, error
	REGBANK A

test_add:
	LOAD s0, 01
	ADD s0, 04
	COMPARE s0, 05		; check simple add, 1 + 4 = 5
	JUMP NZ, error		; 0 means it's equal
	LOAD s0, 10
	LOAD s1, 0C
	ADD s0, s1
	COMPARE s0, 1C		; check 2 register add, 0x10 + 0x0C = 0x1C
	JUMP NZ, error
	LOAD s0, 05	
	ADD s0, FB
	JUMP NC, error		; check overflow = carry, 5 + 251 = 0 + carry
	ADD s0, 01
	COMPARE s0, 01
	JUMP NZ, error
	LOAD s0, 00
	ADD s0, 00
	JUMP NZ, error		; check for zero flag

test_add_carry:
	LOAD s0, FF 
	ADD s0, 01			; s0 = 0, carry set
	ADDCY s0, 01			; s0 = s0 + 1 + carry(1)
	COMPARE s0, 02
	JUMP NZ, error		; s0 is not 2
	LOAD s0, FF
	LOAD s1, 01
	ADD s0, s1			; s0 = 0, carry set
	ADDCY s0, s1		; s0 = s0 + s1(1) + carry(1)
	COMPARE s0, 02
	JUMP NZ, error

test_add_zero:
	LOAD s0, 7B
	LOAD s1, A2
	ADD s0, 1A
	JUMP Z, error
	JUMP C, error
	ADDCY s1, 5E
	JUMP Z, error
	JUMP NC, error
	LOAD s0, 7B
	LOAD s1, A2
	ADD s0, 85
	JUMP NC, error
	JUMP NZ, error
	ADDCY s1, 5D
	JUMP NC, error
	JUMP NZ, error

test_sub:
	LOAD s0, 0A
	SUB s0, 0A
	JUMP NZ, error		; s0 is supposed to be 0
	LOAD s0, AB
	LOAD s1, 0B
	SUB s0, s1			; s0 = s0(AB) - s1(0B) = A0
	COMPARE s0, A0
	JUMP NZ, error

test_sub_carry:
	LOAD s0, 00
	SUB s0, 01			; s0 = 255, carry set
	JUMP NC, error
	SUBCY s0, FE		; s0 = s0(255) - FE - carry(1) = 0
	JUMP Z, error
	LOAD s0, 00
	SUB s0, 01
	LOAD s1, 0A
	SUBCY s0, s1		; s0 = s0(255) - s1(10) - carry(1) = 244
	COMPARE s0, F4
	JUMP NZ, error

test_logic:
	LOAD s0, CA
	AND s0, 53
	COMPARE s0, 42		; CA and 53 = 42!! (but it's just a hex 42)
	JUMP NZ, error
	LOAD s0, CA
	LOAD s1, 14
	AND s0, s1			; CA and 14 = 0
	JUMP NZ, error
	LOAD s0, FF
	ADD s1, 01			; carry set
	AND s0, 01
	JUMP C, error		; carry was not cleared
	LOAD s0, CA			; -- testing or --
	OR s0, 53
	COMPARE s0, DB		; CA or 53 = DB
	JUMP NZ, error
	LOAD s0, F0
	LoAD s1, 0F
	OR s0, s1			; F0 or 0F = 0
	JUMP Z, error
	LOAD s0, FF
	ADD s1, 01			; carry set
	OR s0, 01
	JUMP C, error		; carry was not cleared
	LOAD s0, CA			; -- testing xor --
	XOR s0, 53
	COMPARE s0, 99		; CA xor 53 = 99
	JUMP NZ, error
	LOAD s0, F0
	LOAD s1, F0
	XOR s0, s1			; F0 or F0 = 0
	JUMP NZ, error
	LOAD s0, FF
	ADD s1, 01			; carry set
	XOR s0, 01
	JUMP C, error		; carry was not cleared	
	LOAD s0, 7B			; 14A27B â€“ 14A27B = 000000
	LOAD s1, A2
	LOAD s2, 14
	COMPARE s0, 7B
	COMPARECY s1, A2
	COMPARECY s2, 14
	JUMP NZ, error
	LOAD s0, 7B
	LOAD s1, A2
	COMPARE s0, 7B
	COMPARECY s1, B9
	JUMP NC, error
	JUMP Z, error
	LOAD s0, CA
	LOAD s1, 52
	TEST s0, FF
	TESTCY s1, FF
	JUMP Z, error
	JUMP NC, error
	LOAD s0, CA
	LOAD s1, 52
	TEST s0, 00000100'b
	TESTCY s1, 00100000'b
	JUMP NZ, error
	JUMP C, error

test_shift:
	LOAD s0, 7F
	SL1 s0
	JUMP C, error
	COMPARE s0, FF
	JUMP NZ, error
	LOAD s0, 80
	SL0 s0
	JUMP NZ, error
	SLA s0
	COMPARE s0, 01
	JUMP NZ, error
	LOAD s0, 11
	RL s0
	COMPARE s0, 22
	JUMP NZ, error
	LOAD s0, 81
	SLX s0
	COMPARE s0, 03
	JUMP NZ, error
    LOAD s0, FE
    SR1 s0
    JUMP C, error
    COMPARE s0, FF
    JUMP NZ, error
    LOAD s0, 01
    SR0 s0
    JUMP NZ, error
    SRA s0
    COMPARE s0, 80
    JUMP NZ, error
    LOAD s0, 22
    RR s0
    COMPARE s0, 11
    JUMP NZ, error
	LOAD s0, 81
    SRX s0
    COMPARE s0, C0
    JUMP NZ, error

test_io:
	LOAD s0, 01
	LOAD s1, 02
	LOAD s2, s1
	LOAD s4, 1E
	OUTPUT s0, (s2)		; output value 01 on port 02
	OUTPUT s1, 03		; output value 02 on port 03
	OUTPUTK 03, 4		; output value 03 on port 04
	INPUT s3, 05		; read value on port id 05 into s3
	INPUT s1, (s4)		; read value on port id 1E into s1
	OUTPUT s1, 10		; output read value on port id 10

test_spm:
	LOAD s0, 12
	LOAD s1, 0A
	LOAD s2, FF
	STORE s0, (s1)		; write 12 into addr 0A
	STORE s1, C3		; should be addr 03 in a 64 byte spm
	FETCH s3, (s1)		; read data 12 back from addr 0A
	COMPARE s0, s3		
	JUMP NZ, error
	FETCH s4, 03		; read data from previously masked addr C3 = 03
	COMPARE s4, s1
	JUMP NZ, error
	JUMP test_call

inc_s00:
	ADD s0, 01
	LOAD s2, 05 
	LOAD&RETURN s2, 07

test_call:
	LOAD s0, 01
	LOAD s5, inc_s00'upper
	LOAD s4, inc_s00'lower
	CALL@ (s5, s4)
	COMPARE s0, 02
	JUMP NZ, error
	CALL Z, inc_s00		; zero flag still set
	COMPARE s0, 03
	JUMP NZ, error
	HWBUILD s6			; generate a carry
	CALL NC, inc_s00	
	COMPARE s0, 03		; carry still set, s0 should be 03
	JUMP NZ, error		; if inc was called (s0 = 04) ... it was wrong
	CALL C, inc_s00		; carry set to 0 by compare
	COMPARE s0, 03		; call was done ? s0 = 4 -> error
	JUMP NZ, error
	LOAD s1, passed'upper
	LOAD s0, passed'lower
	JUMP@ (s1, s0)

test_pc:
	COMPARE sD, C9		; random value to switch between over and underflow test
	JUMP NZ, test_underflow
	CALL test_overflow

test_overflow:
	CALL test_overflow

test_underflow:
	LOAD sD, C9
	RETURN 

error:
	JUMP error

passed:
	JUMP passed

	ADDRESS 300
ISR:
	REGBANK B
	LOAD s0, FF
	CALL inc_s00
	REGBANK A
	RETURNI ENABLE


