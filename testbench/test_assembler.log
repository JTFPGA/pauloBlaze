Open PicoBlaze Assembler log for program "../pauloBlaze/testbench/test_assembler.psm"
Generated by opbasm v1.3
  Assembled on 2019-11-17T19:53:04
  PicoBlaze-6 mode

  Last occupied address: 303 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 4096
  Occupied memory locations: 228
  Memory locations available: 3868
  Scratchpad size: 256


Assembly listing
----------------
000                             CONSTANT A_port, 00
000                             CONSTANT B_port, 01
000                             CONSTANT C_port, 02
000                             CONSTANT D_port, 03
000                             CONSTANT W_port, 01
000                             CONSTANT X_port, 02
000                             CONSTANT Y_port, 04
000                             CONSTANT Z_port, 08

000                      start:
000  28001                      ENABLE INTERRUPT
001  14F80                      HWBUILD sf
002  22003                      JUMP test_star                 ; change to test_pc to test under/overflow

003                  test_star:
003  01001                      LOAD s0, 01
004  16100                      STAR s1, s0
005  37001                      REGBANK B
006  1D101                      COMPARE s1, 01
007  360DE                      JUMP NZ, error
008  37000                      REGBANK A

009                   test_add:
009  01001                      LOAD s0, 01
00A  11004                      ADD s0, 04
00B  1D005                      COMPARE s0, 05                 ; check simple add, 1 + 4 = 5
00C  360DE                      JUMP NZ, error                 ; 0 means it's equal
00D  01010                      LOAD s0, 10
00E  0110C                      LOAD s1, 0C
00F  10010                      ADD s0, s1
010  1D01C                      COMPARE s0, 1C                 ; check 2 register add, 0x10 + 0x0C = 0x1C
011  360DE                      JUMP NZ, error
012  01005                      LOAD s0, 05
013  110FB                      ADD s0, FB
014  3E0DE                      JUMP NC, error                 ; check overflow = carry, 5 + 251 = 0 + carry
015  11001                      ADD s0, 01
016  1D001                      COMPARE s0, 01
017  360DE                      JUMP NZ, error
018  01000                      LOAD s0, 00
019  11000                      ADD s0, 00
01A  360DE                      JUMP NZ, error                 ; check for zero flag

01B             test_add_carry:
01B  010FF                      LOAD s0, FF
01C  11001                      ADD s0, 01                     ; s0 = 0, carry set
01D  13001                      ADDCY s0, 01                   ; s0 = s0 + 1 + carry(1)
01E  1D002                      COMPARE s0, 02
01F  360DE                      JUMP NZ, error                 ; s0 is not 2
020  010FF                      LOAD s0, FF
021  01101                      LOAD s1, 01
022  10010                      ADD s0, s1                     ; s0 = 0, carry set
023  12010                      ADDCY s0, s1                   ; s0 = s0 + s1(1) + carry(1)
024  1D002                      COMPARE s0, 02
025  360DE                      JUMP NZ, error

026              test_add_zero:
026  0107B                      LOAD s0, 7B
027  011A2                      LOAD s1, A2
028  1101A                      ADD s0, 1A
029  320DE                      JUMP Z, error
02A  3A0DE                      JUMP C, error
02B  1315E                      ADDCY s1, 5E
02C  320DE                      JUMP Z, error
02D  3E0DE                      JUMP NC, error
02E  0107B                      LOAD s0, 7B
02F  011A2                      LOAD s1, A2
030  11085                      ADD s0, 85
031  3E0DE                      JUMP NC, error
032  360DE                      JUMP NZ, error
033  1315D                      ADDCY s1, 5D
034  3E0DE                      JUMP NC, error
035  360DE                      JUMP NZ, error

036                   test_sub:
036  0100A                      LOAD s0, 0A
037  1900A                      SUB s0, 0A
038  360DE                      JUMP NZ, error                 ; s0 is supposed to be 0
039  010AB                      LOAD s0, AB
03A  0110B                      LOAD s1, 0B
03B  18010                      SUB s0, s1                     ; s0 = s0(AB) - s1(0B) = A0
03C  1D0A0                      COMPARE s0, A0
03D  360DE                      JUMP NZ, error

03E             test_sub_carry:
03E  01000                      LOAD s0, 00
03F  19001                      SUB s0, 01                     ; s0 = 255, carry set
040  3E0DE                      JUMP NC, error
041  1B0FE                      SUBCY s0, FE                   ; s0 = s0(255) - FE - carry(1) = 0
042  320DE                      JUMP Z, error
043  01000                      LOAD s0, 00
044  19001                      SUB s0, 01
045  0110A                      LOAD s1, 0A
046  1A010                      SUBCY s0, s1                   ; s0 = s0(255) - s1(10) - carry(1) = 244
047  1D0F4                      COMPARE s0, F4
048  360DE                      JUMP NZ, error

049                 test_logic:
049  010CA                      LOAD s0, CA
04A  03053                      AND s0, 53
04B  1D042                      COMPARE s0, 42                 ; CA and 53 = 42!! (but it's just a hex 42)
04C  360DE                      JUMP NZ, error
04D  010CA                      LOAD s0, CA
04E  01114                      LOAD s1, 14
04F  02010                      AND s0, s1                     ; CA and 14 = 0
050  360DE                      JUMP NZ, error
051  010FF                      LOAD s0, FF
052  11101                      ADD s1, 01                     ; carry set
053  03001                      AND s0, 01
054  3A0DE                      JUMP C, error                  ; carry was not cleared
055  010CA                      LOAD s0, CA                    ; -- testing or --
056  05053                      OR s0, 53
057  1D0DB                      COMPARE s0, DB                 ; CA or 53 = DB
058  360DE                      JUMP NZ, error
059  010F0                      LOAD s0, F0
05A  0110F                      LOAD s1, 0F
05B  04010                      OR s0, s1                      ; F0 or 0F = 0
05C  320DE                      JUMP Z, error
05D  010FF                      LOAD s0, FF
05E  11101                      ADD s1, 01                     ; carry set
05F  05001                      OR s0, 01
060  3A0DE                      JUMP C, error                  ; carry was not cleared
061  010CA                      LOAD s0, CA                    ; -- testing xor --
062  07053                      XOR s0, 53
063  1D099                      COMPARE s0, 99                 ; CA xor 53 = 99
064  360DE                      JUMP NZ, error
065  010F0                      LOAD s0, F0
066  011F0                      LOAD s1, F0
067  06010                      XOR s0, s1                     ; F0 or F0 = 0
068  360DE                      JUMP NZ, error
069  010FF                      LOAD s0, FF
06A  11101                      ADD s1, 01                     ; carry set
06B  07001                      XOR s0, 01
06C  3A0DE                      JUMP C, error                  ; carry was not cleared
06D  0107B                      LOAD s0, 7B                    ; 14A27B â€“ 14A27B = 000000
06E  011A2                      LOAD s1, A2
06F  01214                      LOAD s2, 14
070  1D07B                      COMPARE s0, 7B
071  1F1A2                      COMPARECY s1, A2
072  1F214                      COMPARECY s2, 14
073  360DE                      JUMP NZ, error
074  0107B                      LOAD s0, 7B
075  011A2                      LOAD s1, A2
076  1D07B                      COMPARE s0, 7B
077  1F1B9                      COMPARECY s1, B9
078  3E0DE                      JUMP NC, error
079  320DE                      JUMP Z, error
07A  010CA                      LOAD s0, CA
07B  01152                      LOAD s1, 52
07C  0D0FF                      TEST s0, FF
07D  0F1FF                      TESTCY s1, FF
07E  320DE                      JUMP Z, error
07F  3E0DE                      JUMP NC, error
080  010CA                      LOAD s0, CA
081  01152                      LOAD s1, 52
082  0D004                      TEST s0, 00000100'b
083  0F120                      TESTCY s1, 00100000'b
084  360DE                      JUMP NZ, error
085  3A0DE                      JUMP C, error

086                 test_shift:
086  0107F                      LOAD s0, 7F
087  14007                      SL1 s0
088  3A0DE                      JUMP C, error
089  1D0FF                      COMPARE s0, FF
08A  360DE                      JUMP NZ, error
08B  01080                      LOAD s0, 80
08C  14006                      SL0 s0
08D  360DE                      JUMP NZ, error
08E  14000                      SLA s0
08F  1D001                      COMPARE s0, 01
090  360DE                      JUMP NZ, error
091  01011                      LOAD s0, 11
092  14002                      RL s0
093  1D022                      COMPARE s0, 22
094  360DE                      JUMP NZ, error
095  01081                      LOAD s0, 81
096  14004                      SLX s0
097  1D003                      COMPARE s0, 03
098  360DE                      JUMP NZ, error
099  010FE                      LOAD s0, FE
09A  1400F                      SR1 s0
09B  3A0DE                      JUMP C, error
09C  1D0FF                      COMPARE s0, FF
09D  360DE                      JUMP NZ, error
09E  01001                      LOAD s0, 01
09F  1400E                      SR0 s0
0A0  360DE                      JUMP NZ, error
0A1  14008                      SRA s0
0A2  1D080                      COMPARE s0, 80
0A3  360DE                      JUMP NZ, error
0A4  01022                      LOAD s0, 22
0A5  1400C                      RR s0
0A6  1D011                      COMPARE s0, 11
0A7  360DE                      JUMP NZ, error
0A8  01081                      LOAD s0, 81
0A9  1400A                      SRX s0
0AA  1D0C0                      COMPARE s0, C0
0AB  360DE                      JUMP NZ, error

0AC                    test_io:
0AC  01001                      LOAD s0, 01
0AD  01102                      LOAD s1, 02
0AE  00210                      LOAD s2, s1
0AF  0141E                      LOAD s4, 1E
0B0  2C020                      OUTPUT s0, (s2)                ; output value 01 on port 02
0B1  2D103                      OUTPUT s1, 03                  ; output value 02 on port 03
0B2  2B034                      OUTPUTK 03, 4                  ; output value 03 on port 04
0B3  09305                      INPUT s3, 05                   ; read value on port id 05 into s3
0B4  08140                      INPUT s1, (s4)                 ; read value on port id 1E into s1
0B5  2D110                      OUTPUT s1, 10                  ; output read value on port id 10

0B6                   test_spm:
0B6  01012                      LOAD s0, 12
0B7  0110A                      LOAD s1, 0A
0B8  012FF                      LOAD s2, FF
0B9  2E010                      STORE s0, (s1)                 ; write 12 into addr 0A
0BA  2F1C3                      STORE s1, C3                   ; should be addr 03 in a 64 byte spm
0BB  0A310                      FETCH s3, (s1)                 ; read data 12 back from addr 0A
0BC  1C030                      COMPARE s0, s3
0BD  360DE                      JUMP NZ, error
0BE  0B403                      FETCH s4, 03                   ; read data from previously masked addr C3 = 03
0BF  1C410                      COMPARE s4, s1
0C0  360DE                      JUMP NZ, error
0C1  220C5                      JUMP test_call

0C2                    inc_s00:
0C2  11001                      ADD s0, 01
0C3  01205                      LOAD s2, 05
0C4  21207                      LOAD&RETURN s2, 07

0C5                  test_call:
0C5  01001                      LOAD s0, 01
0C6  01500                      LOAD s5, inc_s00'upper
0C7  014C2                      LOAD s4, inc_s00'lower
0C8  24540                      CALL@ (s5, s4)
0C9  1D002                      COMPARE s0, 02
0CA  360DE                      JUMP NZ, error
0CB  300C2                      CALL Z, inc_s00                ; zero flag still set
0CC  1D003                      COMPARE s0, 03
0CD  360DE                      JUMP NZ, error
0CE  14680                      HWBUILD s6                     ; generate a carry
0CF  3C0C2                      CALL NC, inc_s00
0D0  1D003                      COMPARE s0, 03                 ; carry still set, s0 should be 03
0D1  360DE                      JUMP NZ, error                 ; if inc was called (s0 = 04) ... it was wrong
0D2  380C2                      CALL C, inc_s00                ; carry set to 0 by compare
0D3  1D003                      COMPARE s0, 03                 ; call was done ? s0 = 4 -> error
0D4  360DE                      JUMP NZ, error
0D5  01100                      LOAD s1, passed'upper
0D6  010DF                      LOAD s0, passed'lower
0D7  26100                      JUMP@ (s1, s0)

0D8                    test_pc:
0D8  1DDC9                      COMPARE sd, C9                 ; random value to switch between over and underflow test
0D9  360DC                      JUMP NZ, test_underflow
0DA  200DB                      CALL test_overflow

0DB              test_overflow:
0DB  200DB                      CALL test_overflow

0DC             test_underflow:
0DC  01DC9                      LOAD sd, C9
0DD  25000                      RETURN

0DE                      error:
0DE  220DE                      JUMP error

0DF                     passed:
0DF  220DF                      JUMP passed

300                             ADDRESS 300
300                        ISR:
300  37001                      REGBANK B
301  010FF                      LOAD s0, FF
302  200C2                      CALL inc_s00
303  29001                      RETURNI ENABLE



All unused memory locations contain zero (equivalent to "LOAD s0, s0")


PSM files that have been assembled
----------------------------------
    ../pauloBlaze/testbench/test_assembler.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file                           
 ----------------      -----  ---------------                           
 *  A_port             00     ../pauloBlaze/testbench/test_assembler.psm
    BEL                07
    BS                 08
 *  B_port             01     ../pauloBlaze/testbench/test_assembler.psm
    CR                 0D
 *  C_port             02     ../pauloBlaze/testbench/test_assembler.psm
    DCS                90
    DEL                7F
 *  D_port             03     ../pauloBlaze/testbench/test_assembler.psm
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
 *  W_port             01     ../pauloBlaze/testbench/test_assembler.psm
 *  X_port             02     ../pauloBlaze/testbench/test_assembler.psm
 *  Y_port             04     ../pauloBlaze/testbench/test_assembler.psm
 *  Z_port             08     ../pauloBlaze/testbench/test_assembler.psm
    datestamp_day      11
    datestamp_month    0B
    datestamp_year     13
    timestamp_hours    13
    timestamp_minutes  35
    timestamp_seconds  04

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name  Value          Source PSM file
 --------------  -----          ---------------
    datestamp$   "17 Nov 2019"
    timestamp$   "19:53:04"


List of line labels
-------------------
    Label           Addr  Source PSM file                           
 --------           ----  ---------------                           
 *  ISR             300   ../pauloBlaze/testbench/test_assembler.psm
    error           0DE   ../pauloBlaze/testbench/test_assembler.psm
    inc_s00         0C2   ../pauloBlaze/testbench/test_assembler.psm
    passed          0DF   ../pauloBlaze/testbench/test_assembler.psm
 *  start           000   ../pauloBlaze/testbench/test_assembler.psm
 *  test_add        009   ../pauloBlaze/testbench/test_assembler.psm
 *  test_add_carry  01B   ../pauloBlaze/testbench/test_assembler.psm
 *  test_add_zero   026   ../pauloBlaze/testbench/test_assembler.psm
    test_call       0C5   ../pauloBlaze/testbench/test_assembler.psm
 *  test_io         0AC   ../pauloBlaze/testbench/test_assembler.psm
 *  test_logic      049   ../pauloBlaze/testbench/test_assembler.psm
    test_overflow   0DB   ../pauloBlaze/testbench/test_assembler.psm
 *  test_pc         0D8   ../pauloBlaze/testbench/test_assembler.psm
 *  test_shift      086   ../pauloBlaze/testbench/test_assembler.psm
 *  test_spm        0B6   ../pauloBlaze/testbench/test_assembler.psm
    test_star       003   ../pauloBlaze/testbench/test_assembler.psm
 *  test_sub        036   ../pauloBlaze/testbench/test_assembler.psm
 *  test_sub_carry  03E   ../pauloBlaze/testbench/test_assembler.psm
    test_underflow  0DC   ../pauloBlaze/testbench/test_assembler.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          13
   ADDCY        4
   AND          3
   CALL         6
   CALL@        1
   COMPARE      28
   COMPARECY    3
   DISABLE      -
   ENABLE       1
   FETCH        2
   HWBUILD      2
   INPUT        2
   JUMP         60
   JUMP@        1
   LOAD         63
   LOAD&RETURN  1
   OR           3
   OUTPUT       3
   OUTPUTK      1
   REGBANK      3
   RETURN       1
   RETURNI      1
   RL           1
   RR           1
   SL0          1
   SL1          1
   SLA          1
   SLX          1
   SR0          1
   SR1          1
   SRA          1
   SRX          1
   STAR         1
   STORE        2
   SUB          4
   SUBCY        2
   TEST         2
   TESTCY       2
   XOR          3
